use std::net::{TcpListener, TcpStream};
use std::io;
use std::io::{Write, Read, Error};

// Running server and handling incoming connections
fn main() {
    println!("Enter the address to be served with this format : address:port\nExample : 127.0.0.1:4545\n");
    print!(" >>> ");
    io::stdout().flush().unwrap();
    match get_input() {
        Some(address) => {
            match TcpListener::bind(&address) {
                Ok(listener) => {
                    println!("\nServer listening on port 4545.");
                    for stream in listener.incoming() {
                        match stream {
                            Ok(stream) => {
                            if let Err(e) = handle_connection(stream) {
                                println!("Error : failed to handle connection !\n{}", e);
                            }
                        }
                        Err(e) => {
                            println!("Error : connection failed !\n{}", e);
                        }
                        }
                    }
                }
                Err(e) => {
                    println!("\nError : couldn't start listener !\n{}", e);
                }
            }
        },
        None => println!("\nError : failed to get input."),
    }
}

// Sending database back on every connections
fn handle_connection(mut stream: TcpStream) -> Result<(), Error> {
    println!("New connection: {}", stream.peer_addr()?);
    
    let data = r#"{
        "keywords": ["malware", "mimikatz", "hello"],
        "keywords_scores": [8, 10, 0],
        "shellcodes": ["554889e54883ec20c745e9b80a0000c745ec0000c300c745fc00000000488d45e9488945f0488b55f0b800000000ffd28945fc8b45fc89c6488d058c0e00004889c7b800000000e8abfeffffb800000000c9c3"],
        "shellcodes_scores": [10]
}"#;
    stream.write(data.as_bytes())?;
    stream.flush()?;

    Ok(())
}

// Get user input
fn get_input() -> Option<String> {
    let mut input = String::new();
    return match io::stdin().read_line(&mut input) {
        Ok(_) => {
            input.remove(input.len()-1);
            Some(input)
        }
        Err(e) => {
            println!(" Error : failed to get the input !\n{}\n", e);
            None
        }
    }
}
